axis.x = element_blank())
fast_map <- plot_usmap(data=fast_v_full, values="proportion", regions="counties",
include=fast_v_full$fips, aes(label=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank())
ggplotly(fast_map)
fast_map <- plot_usmap(data=fast_v_full, values="proportion", regions="counties",
include=fast_v_full$fips, aes(label=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
ggplotly(fast_map)
fast_map <- plot_usmap(data=fast_v_full, values="proportion", regions="counties",
include=fast_v_full$fips, aes(label=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())
ggplotly(fast_map)
fast_map <- plot_usmap(data=fast_v_full, values="proportion", regions="counties",
include=fast_v_full$fips, aes(label=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()) +
ggplot(gapminder, aes(x="proportion"))
fast_map <- plot_usmap(data=fast_v_full, values="proportion", regions="counties",
include=fast_v_full$fips, aes(label=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())
ggplotly(fast_map)
fast_map <- plot_usmap(data=fast_v_full, values="proportion", regions="counties",
include=fast_v_full$fips, aes(label=county, label2=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())
ggplotly(fast_map)
ggplotly(fast_map, hoverinfo="text")
ggplotly(fast_map, text="name")
ggplotly(fast_map)
fast_map <- plot_usmap(data=fast_v_full, values="proportion", regions="counties",
include=fast_v_full$fips, aes(label=county, label2=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())
ggplotly(fast_map + text=aes("this"))
ggplotly(fast_map,text=aes("this"))
fast_map <- plot_usmap(data=fast_v_full, values="Proportion", regions="Counties",
include=fast_v_full$fips, aes(label=county, label2=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())
ggplotly(fast_map,text=aes("this"))
fast_map <- plot_usmap(data=fast_v_full, values="proportion", regions="counties",
include=fast_v_full$fips, aes(label=county, label2=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())
ggplotly(fast_map,text=aes("this"))
fast_map <- plot_usmap(data=fast_v_full, values="proportion", regions="counties",
include=fast_v_full$fips, aes(label=county, label2=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())
ggplotly(fast_map,tooltip=c("text"))
ggplotly(fast_map,tooltip=c("text", "x"))
fast_map <- plot_usmap(data=fast_v_full, values="proportion", regions="counties",
include=fast_v_full$fips, aes(label=county, label2=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())
ggplotly(fast_map)
fast_map <- plot_usmap(data=fast_v_full, values="proportion", regions="counties",
include=fast_v_full$fips, test = aes(label=county, label2=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())
fast_map <- plot_usmap(data=fast_v_full, values="proportion", regions="counties",
include=fast_v_full$fips, test = (label=county, label2=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())
fast_map <- plot_usmap(data=fast_v_full, values="proportion", regions="counties",
include=fast_v_full$fips, aes(label=county, label2=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())
ggplotly(fast_map)
ggplotly(fast_map, tooltip = NULL)
ggplotly(fast_map, tooltip = c("label"))
ggplotly(fast_map, tooltip = c("label", "label2"))
fast_v_full <- data.frame("fips" = c(1), "state"=c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(healthy_wash)) {
row <- healthy_wash[i,c("fips", "state", "county", "FF_Rest_2014", "FS_Rest_2014")]
prop <- round(row$FF_Rest_2014 / row$FS_Rest_2014, digits=2)
ret <- c(row$fips, row$state, row$county, prop)
fast_v_full <- InsertRow(fast_v_full, ret)
}
fast_v_full <- fast_v_full[2:40,]
fast_map <- plot_usmap(data=fast_v_full, values="proportion", regions="counties",
include=fast_v_full$fips, aes(label=county, label2=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())
ggplotly(fast_map, tooltip = c("label", "label2"))
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
for (i in 1:nrow(data)) {
row <- data[i,]
print(row)
}
# View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
print(prop)
toInsert <- c(row$fips, row$state, row$county)
ret <- InsertRow(ret, toInsert)
}
# View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
print(prop)
toInsert <- c(row$fips, row$state, row$county)
# ret <- InsertRow(ret, toInsert)
}
# View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
if (is.infinite(prop)) {
prop <- row$Pop_2015
}
print(prop)
toInsert <- c(row$fips, row$state, row$county)
# ret <- InsertRow(ret, toInsert)
}
# View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
# if (is.infinite(prop)) {
#   prop <- row$Pop_2015
# }
print(is.infinite(prop))
toInsert <- c(row$fips, row$state, row$county)
# ret <- InsertRow(ret, toInsert)
}
# View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
# if (is.infinite(prop)) {
#   prop <- row$Pop_2015
# }
print(is.finite(prop))
toInsert <- c(row$fips, row$state, row$county)
# ret <- InsertRow(ret, toInsert)
}
# View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
if (prop == "Inf") {
prop <- row$Pop_2015
}
print(prop)
toInsert <- c(row$fips, row$state, row$county)
# ret <- InsertRow(ret, toInsert)
}
# View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
if (prop == "Inf") {
prop <- row$Pop_2015
}
toInsert <- c(row$fips, row$state, row$county, prop)
ret <- InsertRow(ret, toInsert)
}
return(ret)
# View(data)
}
market_analysis("FMKT_SNAP_2016")
print(market_analysis("FMKT_SNAP_2016"))
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
if (prop == "Inf") {
prop <- row$Pop_2015
}
toInsert <- c(row$fips, row$state, row$county, prop)
ret <- InsertRow(ret, toInsert)
}
return(ret[2:29,])
# View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
if (prop == "Inf") {
prop <- row$Pop_2015
}
toInsert <- c(row$fips, row$state, row$county, prop[1])
ret <- InsertRow(ret, toInsert)
}
return(ret[2:29,])
# View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
if (prop == "Inf") {
prop <- row$Pop_2015
}
toInsert <- c(row$fips, row$state, row$county, prop)
print(toInsert)
ret <- InsertRow(ret, toInsert)
}
return(ret[2:29,])
# View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
if (prop == "Inf") {
prop <- row$Pop_2015
}
toInsert <- c(row$fips, row$state, row$county, prop)
print(toInsert)
ret <- InsertRow(ret, toInsert)
}
# View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
if (prop == "Inf") {
prop <- row$Pop_2015
} else {
prop <- prop[1]
}
toInsert <- c(row$fips, row$state, row$county, prop)
print(prop)
ret <- InsertRow(ret, toInsert)
}
# View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
if (prop == "Inf") {
prop <- row$Pop_2015
} else {
prop <- prop[columnName]
}
toInsert <- c(row$fips, row$state, row$county, prop)
print(prop)
ret <- InsertRow(ret, toInsert)
}
# View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
if (prop == "Inf") {
prop <- row$Pop_2015
} else {
prop <- prop[[columnName]]
}
toInsert <- c(row$fips, row$state, row$county, prop)
print(prop)
ret <- InsertRow(ret, toInsert)
}
# View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
if (prop == "Inf") {
prop <- row$Pop_2015
} else {
prop <- prop[[columnName]]
}
toInsert <- c(row$fips, row$state, row$county, prop)
ret <- InsertRow(ret, toInsert)
}
return(ret)
# View(data)
}
market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
if (prop == "Inf") {
prop <- row$Pop_2015
} else {
prop <- prop[[columnName]]
}
toInsert <- c(row$fips, row$state, row$county, prop)
ret <- InsertRow(ret, toInsert)
}
return(ret[2:39,])
# View(data)
}
market_analysis("FMKT_SNAP_2016")
snap <- market_analysis("FMKT_SNAP_2016")
wic <- market_analysis("FMKT_WIC_2016")
wiccash <- market_analysis("FMKT_WICCASH_2016")
sfmnp <- market_analysis("FMKT_SFMNP_2016")
plot_data <- merge(fast_v_full, snap, by="fips")
View(plot_data)
plot_data <- merge(fast_v_full, snap, by="fips") %>%
merge(wic, by="fips") %>% merge(wiccash, by="fips")
View(plot_data)
plot_data <- merge(fast_v_full, snap, by="fips") %>%
merge(wic, by="fips")
View(plot_data)
plot_data <- data.frame("fips" = fast_v_full$fips, "state" = fast_v_full$state, "county" = fast_v_full$state,
"fast_food" = fast_v_full$proportion, "snap" = snap$proportion, "wic" = wic$proportion,
"wiccash" = wiccash$proportion, "sfmnp" = sfmnp$proportion)
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
if (prop == "Inf") {
prop <- row$Pop_2015
} else {
prop <- prop[[columnName]]
}
toInsert <- c(row$fips, row$state, row$county, prop)
ret <- InsertRow(ret, toInsert)
}
print(ret)
# return(ret[2:39,])
}
snap <- market_analysis("FMKT_SNAP_2016")
market_analysis <- function(columnName) {
data <- healthy_wash[,c("fips", "state", "county", "Pop_2015", columnName)]
ret <- data.frame("fips" = c(1), "state" = c(1), "county" = c(1), "proportion" = c(1))
for (i in 1:nrow(data)) {
row <- data[i,]
prop <- row$Pop_2015 / row[columnName]
if (prop == "Inf") {
prop <- row$Pop_2015
} else {
prop <- prop[[columnName]]
}
toInsert <- c(row$fips, row$state, row$county, prop)
ret <- InsertRow(ret, toInsert)
}
return(ret[2:40,])
}
snap <- market_analysis("FMKT_SNAP_2016")
wic <- market_analysis("FMKT_WIC_2016")
wiccash <- market_analysis("FMKT_WICCASH_2016")
sfmnp <- market_analysis("FMKT_SFMNP_2016")
plot_data <- data.frame("fips" = fast_v_full$fips, "state" = fast_v_full$state, "county" = fast_v_full$state,
"fast_food" = fast_v_full$proportion, "snap" = snap$proportion, "wic" = wic$proportion,
"wiccash" = wiccash$proportion, "sfmnp" = sfmnp$proportion)
View(plot_data)
fast_map <- plot_usmap(data=plot_data, values="fast_food", regions="counties",
include=fast_v_full$fips, aes(label=county, label2=proportion)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())
ggplotly(fast_map, tooltip = c("label", "label2"))
fast_map <- plot_usmap(data=plot_data, values="fast_food", regions="counties",
include=fast_v_full$fips, aes(label=county, label2=fast_food)) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank())
ggplotly(fast_map, tooltip = c("label", "label2"))
